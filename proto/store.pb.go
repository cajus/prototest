// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: store.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		store.proto

	It has these top-level messages:
		Parameter
		ParameterSet
		ParameterSets
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Parameter struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Parameter_JsonValue
	//	*Parameter_StrValue
	//	*Parameter_IntValue
	//	*Parameter_BoolValue
	//	*Parameter_FloatValue
	Value isParameter_Value `protobuf_oneof:"value"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptorStore, []int{0} }

type isParameter_Value interface {
	isParameter_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Parameter_JsonValue struct {
	JsonValue string `protobuf:"bytes,2,opt,name=json_value,json=jsonValue,proto3,oneof"`
}
type Parameter_StrValue struct {
	StrValue string `protobuf:"bytes,3,opt,name=str_value,json=strValue,proto3,oneof"`
}
type Parameter_IntValue struct {
	IntValue int32 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"`
}
type Parameter_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof"`
}
type Parameter_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*Parameter_JsonValue) isParameter_Value()  {}
func (*Parameter_StrValue) isParameter_Value()   {}
func (*Parameter_IntValue) isParameter_Value()   {}
func (*Parameter_BoolValue) isParameter_Value()  {}
func (*Parameter_FloatValue) isParameter_Value() {}

func (m *Parameter) GetValue() isParameter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetJsonValue() string {
	if x, ok := m.GetValue().(*Parameter_JsonValue); ok {
		return x.JsonValue
	}
	return ""
}

func (m *Parameter) GetStrValue() string {
	if x, ok := m.GetValue().(*Parameter_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *Parameter) GetIntValue() int32 {
	if x, ok := m.GetValue().(*Parameter_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Parameter) GetBoolValue() bool {
	if x, ok := m.GetValue().(*Parameter_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Parameter) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Parameter_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Parameter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Parameter_OneofMarshaler, _Parameter_OneofUnmarshaler, _Parameter_OneofSizer, []interface{}{
		(*Parameter_JsonValue)(nil),
		(*Parameter_StrValue)(nil),
		(*Parameter_IntValue)(nil),
		(*Parameter_BoolValue)(nil),
		(*Parameter_FloatValue)(nil),
	}
}

func _Parameter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Parameter)
	// value
	switch x := m.Value.(type) {
	case *Parameter_JsonValue:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.JsonValue)
	case *Parameter_StrValue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StrValue)
	case *Parameter_IntValue:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IntValue))
	case *Parameter_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Parameter_FloatValue:
		_ = b.EncodeVarint(6<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case nil:
	default:
		return fmt.Errorf("Parameter.Value has unexpected type %T", x)
	}
	return nil
}

func _Parameter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Parameter)
	switch tag {
	case 2: // value.json_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Parameter_JsonValue{x}
		return true, err
	case 3: // value.str_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Parameter_StrValue{x}
		return true, err
	case 4: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Parameter_IntValue{int32(x)}
		return true, err
	case 5: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Parameter_BoolValue{x != 0}
		return true, err
	case 6: // value.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Parameter_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	default:
		return false, nil
	}
}

func _Parameter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Parameter)
	// value
	switch x := m.Value.(type) {
	case *Parameter_JsonValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.JsonValue)))
		n += len(x.JsonValue)
	case *Parameter_StrValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StrValue)))
		n += len(x.StrValue)
	case *Parameter_IntValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *Parameter_BoolValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *Parameter_FloatValue:
		n += proto.SizeVarint(6<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ParameterSet struct {
	Raw        []byte       `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Parameters []*Parameter `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ParameterSet) Reset()                    { *m = ParameterSet{} }
func (m *ParameterSet) String() string            { return proto.CompactTextString(m) }
func (*ParameterSet) ProtoMessage()               {}
func (*ParameterSet) Descriptor() ([]byte, []int) { return fileDescriptorStore, []int{1} }

func (m *ParameterSet) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *ParameterSet) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ParameterSets struct {
	Sets map[string]*ParameterSet `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ParameterSets) Reset()                    { *m = ParameterSets{} }
func (m *ParameterSets) String() string            { return proto.CompactTextString(m) }
func (*ParameterSets) ProtoMessage()               {}
func (*ParameterSets) Descriptor() ([]byte, []int) { return fileDescriptorStore, []int{2} }

func (m *ParameterSets) GetSets() map[string]*ParameterSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameter)(nil), "pb.Parameter")
	proto.RegisterType((*ParameterSet)(nil), "pb.ParameterSet")
	proto.RegisterType((*ParameterSets)(nil), "pb.ParameterSets")
}
func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStore(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Parameter_JsonValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintStore(dAtA, i, uint64(len(m.JsonValue)))
	i += copy(dAtA[i:], m.JsonValue)
	return i, nil
}
func (m *Parameter_StrValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintStore(dAtA, i, uint64(len(m.StrValue)))
	i += copy(dAtA[i:], m.StrValue)
	return i, nil
}
func (m *Parameter_IntValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintStore(dAtA, i, uint64(m.IntValue))
	return i, nil
}
func (m *Parameter_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Parameter_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x35
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
	i += 4
	return i, nil
}
func (m *ParameterSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParameterSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Raw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStore(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ParameterSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParameterSets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for k, _ := range m.Sets {
			dAtA[i] = 0xa
			i++
			v := m.Sets[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovStore(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovStore(uint64(len(k))) + msgSize
			i = encodeVarintStore(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintStore(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintStore(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Parameter_JsonValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.JsonValue)
	n += 1 + l + sovStore(uint64(l))
	return n
}
func (m *Parameter_StrValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.StrValue)
	n += 1 + l + sovStore(uint64(l))
	return n
}
func (m *Parameter_IntValue) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovStore(uint64(m.IntValue))
	return n
}
func (m *Parameter_BoolValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *Parameter_FloatValue) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *ParameterSet) Size() (n int) {
	var l int
	_ = l
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func (m *ParameterSets) Size() (n int) {
	var l int
	_ = l
	if len(m.Sets) > 0 {
		for k, v := range m.Sets {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStore(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovStore(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStore(uint64(mapEntrySize))
		}
	}
	return n
}

func sovStore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Parameter_JsonValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Parameter_StrValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntValue", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Parameter_IntValue{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Parameter_BoolValue{b}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &Parameter_FloatValue{float32(math.Float32frombits(v))}
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParameterSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParameterSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParameterSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Parameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParameterSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParameterSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParameterSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sets == nil {
				m.Sets = make(map[string]*ParameterSet)
			}
			var mapkey string
			var mapvalue *ParameterSet
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStore
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthStore
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ParameterSet{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sets[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("store.proto", fileDescriptorStore) }

var fileDescriptorStore = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x3b, 0x69, 0x53, 0x9b, 0x49, 0x0a, 0x65, 0x4f, 0x41, 0x31, 0x8d, 0x39, 0x48, 0x2e,
	0x46, 0xa8, 0x17, 0xf1, 0x58, 0x10, 0xea, 0x49, 0x59, 0xc1, 0xab, 0x6c, 0x60, 0x85, 0x6a, 0x9a,
	0x0d, 0xbb, 0xab, 0xd2, 0x67, 0xf0, 0xc5, 0x04, 0x2f, 0x3e, 0x82, 0xe4, 0x49, 0x64, 0x37, 0xdb,
	0x50, 0xbd, 0x2c, 0xc3, 0xff, 0xfd, 0xf3, 0x33, 0x33, 0x8b, 0xa1, 0xd2, 0x42, 0xf2, 0xa2, 0x91,
	0x42, 0x0b, 0xe2, 0x35, 0x65, 0xf6, 0x05, 0x18, 0xdc, 0x31, 0xc9, 0x36, 0x5c, 0x73, 0x49, 0x08,
	0x8e, 0x6a, 0xb6, 0xe1, 0x31, 0xa4, 0x90, 0x07, 0xd4, 0xd6, 0x64, 0x8e, 0xf8, 0xac, 0x44, 0xfd,
	0xf8, 0xc6, 0xaa, 0x57, 0x1e, 0x7b, 0x86, 0xac, 0x06, 0x34, 0x30, 0xda, 0x83, 0x91, 0xc8, 0x31,
	0x06, 0x4a, 0x4b, 0xc7, 0x87, 0x8e, 0x4f, 0x94, 0x96, 0x3d, 0x5e, 0xd7, 0xda, 0xe1, 0x51, 0x0a,
	0xb9, 0x6f, 0xf0, 0xba, 0xd6, 0x1d, 0x9e, 0x23, 0x96, 0x42, 0x54, 0x8e, 0xfb, 0x29, 0xe4, 0x13,
	0x13, 0x6f, 0xb4, 0xce, 0x70, 0x82, 0xe1, 0x53, 0x25, 0xd8, 0x2e, 0x61, 0x9c, 0x42, 0xee, 0xad,
	0x06, 0x14, 0xad, 0x68, 0x2d, 0xcb, 0x03, 0xf4, 0x2d, 0xcc, 0x6e, 0x31, 0xea, 0x97, 0xb9, 0xe7,
	0x9a, 0xcc, 0x70, 0x28, 0xd9, 0xbb, 0x5d, 0x27, 0xa2, 0xa6, 0x24, 0x67, 0x88, 0xcd, 0xce, 0xa1,
	0x62, 0x2f, 0x1d, 0xe6, 0xe1, 0x62, 0x5a, 0x34, 0x65, 0xd1, 0xf7, 0xd1, 0x3d, 0x43, 0xf6, 0x01,
	0x38, 0xdd, 0x4f, 0x54, 0xe4, 0x1c, 0x47, 0x8a, 0x6b, 0x15, 0x83, 0x6d, 0x3d, 0xfa, 0xd3, 0x6a,
	0x0c, 0x85, 0x79, 0xae, 0x6b, 0x2d, 0xb7, 0xd4, 0x1a, 0x0f, 0x6f, 0x30, 0xe8, 0x25, 0x33, 0xd0,
	0x0b, 0xdf, 0xba, 0xfb, 0x9a, 0x92, 0x9c, 0xba, 0xd9, 0xed, 0x65, 0xc3, 0xc5, 0xec, 0x7f, 0x20,
	0xed, 0xf0, 0x95, 0x77, 0x09, 0xcb, 0xe8, 0xb3, 0x4d, 0xe0, 0xbb, 0x4d, 0xe0, 0xa7, 0x4d, 0xa0,
	0x1c, 0xdb, 0x5f, 0xbc, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x01, 0xe7, 0xed, 0xe0, 0xd4, 0x01,
	0x00, 0x00,
}
